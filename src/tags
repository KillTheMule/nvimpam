!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/940ef40/
CursorMovedI	event.rs	/^    CursorMovedI { line: u64, column: usize },$/;"	e	enum:Event
Event	event.rs	/^impl fmt::Debug for Event {$/;"	c
Event	event.rs	/^pub enum Event {$/;"	g
Insert	main.rs	/^    Insert,$/;"	e	enum:Mode
Mode	main.rs	/^enum Mode {$/;"	g
NeovimHandler	handler.rs	/^impl Handler for NeovimHandler {$/;"	c
NeovimHandler	handler.rs	/^impl NeovimHandler {$/;"	c
NeovimHandler	handler.rs	/^pub struct NeovimHandler(pub mpsc::Sender<Event>);$/;"	s
Other	main.rs	/^    Other,$/;"	e	enum:Mode
Position	position.rs	/^impl Ord for Position {$/;"	c
Position	position.rs	/^impl PartialOrd for Position {$/;"	c
Position	position.rs	/^impl Position {$/;"	c
Position	position.rs	/^impl fmt::Debug for Position {$/;"	c
Position	position.rs	/^pub struct Position {$/;"	s
Quit	event.rs	/^    Quit,$/;"	e	enum:Event
Replace	main.rs	/^    Replace,$/;"	e	enum:Mode
args	main.rs	/^mod args;$/;"	n
cmp	position.rs	/^    fn cmp(&self, other: &Position) -> Ordering {$/;"	F	implementation:Position
column	position.rs	/^    pub column: usize,$/;"	m	struct:Position
event	main.rs	/^mod event;$/;"	n
fmt	event.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:Event
fmt	position.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	F	implementation:Position
handle_notify	handler.rs	/^    fn handle_notify(&mut self, name: &str, args: &Vec<Value>) {$/;"	F	implementation:NeovimHandler
handle_request	handler.rs	/^    fn handle_request(&mut self, _name: &str, _args: &Vec<Value>) -> Result<Value, Value> {$/;"	F	implementation:NeovimHandler
handler	main.rs	/^mod handler;$/;"	n
init_logging	main.rs	/^fn init_logging() -> Result<(), Box<Error>> {$/;"	f
line	position.rs	/^    pub line: usize,$/;"	m	struct:Position
main	main.rs	/^fn main() {$/;"	f
new	position.rs	/^    pub fn new(line: usize, column: usize) -> Position {$/;"	F	implementation:Position
parse_cursor_moved_i	handler.rs	/^    pub fn parse_cursor_moved_i(&mut self, args: &Vec<Value>) -> Result<Event, String> {$/;"	F	implementation:NeovimHandler
parse_string	args.rs	/^pub fn parse_string(value: &Value) -> Result<String, String> {$/;"	f
parse_u64	args.rs	/^pub fn parse_u64(value: &Value) -> Result<u64, String> {$/;"	f
parse_usize	args.rs	/^pub fn parse_usize(value: &Value) -> Result<usize, String> {$/;"	f
partial_cmp	position.rs	/^    fn partial_cmp(&self, other: &Position) -> Option<Ordering> {$/;"	F	implementation:Position
position	main.rs	/^mod position;$/;"	n
start_event_loop	main.rs	/^fn start_event_loop(receiver: mpsc::Receiver<Event>, mut nvim: Neovim) {$/;"	f
start_program	main.rs	/^fn start_program() -> Result<(), Box<Error>> {$/;"	f
